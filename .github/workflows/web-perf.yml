name: Web Performance Testing

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'packages/ui/**'
      - '.github/workflows/web-perf.yml'
  push:
    branches: [main]
    paths:
      - 'apps/web/**'
      - 'packages/ui/**'
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      url:
        description: 'URL to test (optional, defaults to staging)'
        required: false
        type: string
      budget_lcp:
        description: 'LCP budget in ms'
        required: false
        default: '2500'
        type: string
      budget_fid:
        description: 'FID budget in ms'
        required: false
        default: '100'
        type: string

env:
  NODE_VERSION: '18'
  LIGHTHOUSE_CI_VERSION: '0.12.0'

jobs:
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        page:
          - path: '/'
            name: 'Homepage'
            budget_lcp: 2500
            budget_fid: 100
            budget_cls: 0.1
          - path: '/login'
            name: 'Login Page'
            budget_lcp: 2000
            budget_fid: 100
            budget_cls: 0.1
          - path: '/dashboard'
            name: 'Dashboard'
            budget_lcp: 3000
            budget_fid: 100
            budget_cls: 0.1
          - path: '/projects'
            name: 'Projects List'
            budget_lcp: 2500
            budget_fid: 100
            budget_cls: 0.1
          - path: '/analytics'
            name: 'Analytics'
            budget_lcp: 3500
            budget_fid: 100
            budget_cls: 0.1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g @lhci/cli@${{ env.LIGHTHOUSE_CI_VERSION }}

      - name: Build application
        run: |
          npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: Start application
        run: |
          npm run start &
          sleep 30
        env:
          PORT: 3000

      - name: Wait for application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__COMMIT_TIME: ${{ github.event.head_commit.timestamp }}
          LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}
          LHCI_BUILD_CONTEXT__COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

      - name: Run custom Lighthouse audit
        run: |
          # Determine URL to test
          if [ -n "${{ github.event.inputs.url }}" ]; then
            TEST_URL="${{ github.event.inputs.url }}"
          else
            TEST_URL="http://localhost:3000"
          fi
          
          # Get budgets
          LCP_BUDGET="${{ github.event.inputs.budget_lcp || matrix.page.budget_lcp }}"
          FID_BUDGET="${{ github.event.inputs.budget_fid || matrix.page.budget_fid }}"
          CLS_BUDGET="${{ matrix.page.budget_cls }}"
          
          echo "Testing: ${TEST_URL}${{ matrix.page.path }}"
          echo "Budgets - LCP: ${LCP_BUDGET}ms, FID: ${FID_BUDGET}ms, CLS: ${CLS_BUDGET}"
          
          # Run Lighthouse
          lighthouse "${TEST_URL}${{ matrix.page.path }}" \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --output=json \
            --output-path=./lighthouse-${{ matrix.page.name }}.json \
            --preset=perf \
            --throttling-method=simulate \
            --form-factor=desktop \
            --screenEmulation.disabled=true
          
          # Parse results
          LCP=$(cat ./lighthouse-${{ matrix.page.name }}.json | jq '.audits["largest-contentful-paint"].numericValue')
          FID=$(cat ./lighthouse-${{ matrix.page.name }}.json | jq '.audits["max-potential-fid"].numericValue')
          CLS=$(cat ./lighthouse-${{ matrix.page.name }}.json | jq '.audits["cumulative-layout-shift"].numericValue')
          PERFORMANCE_SCORE=$(cat ./lighthouse-${{ matrix.page.name }}.json | jq '.categories.performance.score * 100')
          
          echo "Results - LCP: ${LCP}ms, FID: ${FID}ms, CLS: ${CLS}, Performance Score: ${PERFORMANCE_SCORE}"
          
          # Check budgets
          BUDGET_FAILED=false
          
          if (( $(echo "$LCP > $LCP_BUDGET" | bc -l) )); then
            echo "❌ LCP budget exceeded: ${LCP}ms > ${LCP_BUDGET}ms"
            BUDGET_FAILED=true
          else
            echo "✅ LCP within budget: ${LCP}ms <= ${LCP_BUDGET}ms"
          fi
          
          if (( $(echo "$FID > $FID_BUDGET" | bc -l) )); then
            echo "❌ FID budget exceeded: ${FID}ms > ${FID_BUDGET}ms"
            BUDGET_FAILED=true
          else
            echo "✅ FID within budget: ${FID}ms <= ${FID_BUDGET}ms"
          fi
          
          if (( $(echo "$CLS > $CLS_BUDGET" | bc -l) )); then
            echo "❌ CLS budget exceeded: ${CLS} > ${CLS_BUDGET}"
            BUDGET_FAILED=true
          else
            echo "✅ CLS within budget: ${CLS} <= ${CLS_BUDGET}"
          fi
          
          # Save results for comment
          cat > ./perf-results-${{ matrix.page.name }}.json << EOF
          {
            "page": "${{ matrix.page.name }}",
            "path": "${{ matrix.page.path }}",
            "lcp": $LCP,
            "fid": $FID,
            "cls": $CLS,
            "performance_score": $PERFORMANCE_SCORE,
            "budgets": {
              "lcp": $LCP_BUDGET,
              "fid": $FID_BUDGET,
              "cls": $CLS_BUDGET
            },
            "budget_failed": $BUDGET_FAILED
          }
          EOF
          
          if [ "$BUDGET_FAILED" = true ]; then
            echo "Performance budgets exceeded for ${{ matrix.page.name }}"
            exit 1
          fi

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results-${{ matrix.page.name }}
          path: |
            ./lighthouse-*.json
            ./perf-results-*.json
          retention-days: 30

      - name: Stop application
        if: always()
        run: |
          pkill -f "npm run start" || true

  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: lighthouse
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate performance summary
        run: |
          echo "# 🚀 Web Performance Report" > performance-summary.md
          echo "" >> performance-summary.md
          echo "Performance audit results for commit \`${{ github.sha }}\`" >> performance-summary.md
          echo "" >> performance-summary.md
          echo "| Page | LCP | FID | CLS | Performance Score | Status |" >> performance-summary.md
          echo "|------|-----|-----|-----|------------------|--------|" >> performance-summary.md
          
          OVERALL_STATUS="✅ PASSED"
          
          for dir in ./artifacts/lighthouse-results-*; do
            if [ -d "$dir" ]; then
              for file in "$dir"/perf-results-*.json; do
                if [ -f "$file" ]; then
                  PAGE=$(jq -r '.page' "$file")
                  PATH=$(jq -r '.path' "$file")
                  LCP=$(jq -r '.lcp' "$file")
                  FID=$(jq -r '.fid' "$file")
                  CLS=$(jq -r '.cls' "$file")
                  SCORE=$(jq -r '.performance_score' "$file")
                  BUDGET_FAILED=$(jq -r '.budget_failed' "$file")
                  
                  if [ "$BUDGET_FAILED" = "true" ]; then
                    STATUS="❌ FAILED"
                    OVERALL_STATUS="❌ FAILED"
                  else
                    STATUS="✅ PASSED"
                  fi
                  
                  echo "| $PAGE (\`$PATH\`) | ${LCP}ms | ${FID}ms | $CLS | ${SCORE}% | $STATUS |" >> performance-summary.md
                fi
              done
            fi
          done
          
          echo "" >> performance-summary.md
          echo "**Overall Status: $OVERALL_STATUS**" >> performance-summary.md
          echo "" >> performance-summary.md
          
          if [ "$OVERALL_STATUS" = "❌ FAILED" ]; then
            echo "## 🔧 Performance Optimization Tips" >> performance-summary.md
            echo "" >> performance-summary.md
            echo "- **LCP (Largest Contentful Paint)**: Optimize images, reduce server response times, eliminate render-blocking resources" >> performance-summary.md
            echo "- **FID (First Input Delay)**: Reduce JavaScript execution time, break up long tasks, use web workers" >> performance-summary.md
            echo "- **CLS (Cumulative Layout Shift)**: Set size attributes on images/videos, avoid inserting content above existing content" >> performance-summary.md
            echo "" >> performance-summary.md
            echo "📊 [Web Vitals Guide](https://web.dev/vitals/)" >> performance-summary.md
          fi
          
          echo "OVERALL_STATUS=$OVERALL_STATUS" >> $GITHUB_ENV

      - name: Comment PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('performance-summary.md', 'utf8');
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(
              comment => comment.body.includes('🚀 Web Performance Report')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: summary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }

      - name: Fail if performance budgets exceeded
        if: env.OVERALL_STATUS == '❌ FAILED'
        run: |
          echo "Performance budgets were exceeded. Please optimize the application before merging."
          exit 1

      - name: Upload performance summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-summary
          path: performance-summary.md
          retention-days: 30
