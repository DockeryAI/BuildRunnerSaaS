"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/brainstorm/chat/route";
exports.ids = ["app/api/brainstorm/chat/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fbrainstorm%2Fchat%2Froute&page=%2Fapi%2Fbrainstorm%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbrainstorm%2Fchat%2Froute.ts&appDir=%2FUsers%2Fbyronhudson%2FProjects%2FBuildRunnerSaaS%2Fapps%2Fweb%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbyronhudson%2FProjects%2FBuildRunnerSaaS%2Fapps%2Fweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fbrainstorm%2Fchat%2Froute&page=%2Fapi%2Fbrainstorm%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbrainstorm%2Fchat%2Froute.ts&appDir=%2FUsers%2Fbyronhudson%2FProjects%2FBuildRunnerSaaS%2Fapps%2Fweb%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbyronhudson%2FProjects%2FBuildRunnerSaaS%2Fapps%2Fweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var _Users_byronhudson_Projects_BuildRunnerSaaS_apps_web_app_api_brainstorm_chat_route_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/api/brainstorm/chat/route.ts */ \"(rsc)/./app/api/brainstorm/chat/route.ts\");\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/brainstorm/chat/route\",\n        pathname: \"/api/brainstorm/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/brainstorm/chat/route\"\n    },\n    resolvedPagePath: \"/Users/byronhudson/Projects/BuildRunnerSaaS/apps/web/app/api/brainstorm/chat/route.ts\",\n    nextConfigOutput,\n    userland: _Users_byronhudson_Projects_BuildRunnerSaaS_apps_web_app_api_brainstorm_chat_route_ts__WEBPACK_IMPORTED_MODULE_2__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/brainstorm/chat/route\";\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZicmFpbnN0b3JtJTJGY2hhdCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGYnJhaW5zdG9ybSUyRmNoYXQlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZicmFpbnN0b3JtJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmJ5cm9uaHVkc29uJTJGUHJvamVjdHMlMkZCdWlsZFJ1bm5lclNhYVMlMkZhcHBzJTJGd2ViJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmJ5cm9uaHVkc29uJTJGUHJvamVjdHMlMkZCdWlsZFJ1bm5lclNhYVMlMkZhcHBzJTJGd2ViJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNtRDtBQUNsSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNpSjs7QUFFakoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZHJ1bm5lci13ZWIvP2Q4NTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2J5cm9uaHVkc29uL1Byb2plY3RzL0J1aWxkUnVubmVyU2FhUy9hcHBzL3dlYi9hcHAvYXBpL2JyYWluc3Rvcm0vY2hhdC9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYnJhaW5zdG9ybS9jaGF0L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYnJhaW5zdG9ybS9jaGF0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9icmFpbnN0b3JtL2NoYXQvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvYnlyb25odWRzb24vUHJvamVjdHMvQnVpbGRSdW5uZXJTYWFTL2FwcHMvd2ViL2FwcC9hcGkvYnJhaW5zdG9ybS9jaGF0L3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2JyYWluc3Rvcm0vY2hhdC9yb3V0ZVwiO1xuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fbrainstorm%2Fchat%2Froute&page=%2Fapi%2Fbrainstorm%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbrainstorm%2Fchat%2Froute.ts&appDir=%2FUsers%2Fbyronhudson%2FProjects%2FBuildRunnerSaaS%2Fapps%2Fweb%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbyronhudson%2FProjects%2FBuildRunnerSaaS%2Fapps%2Fweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/brainstorm/chat/route.ts":
/*!******************************************!*\
  !*** ./app/api/brainstorm/chat/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n\n// Real OpenRouter service integration\nclass OpenRouterService {\n    constructor(apiKey){\n        this.baseUrl = \"https://openrouter.ai/api/v1\";\n        this.apiKey = apiKey;\n    }\n    async generateSuggestions(category, prompt) {\n        const modelConfig = this.getModelConfig(category);\n        const systemPrompt = this.getSystemPrompt(category);\n        const enhancedPrompt = `${prompt}\n\nPlease provide 3-5 actionable suggestions in JSON format. Each suggestion should follow this exact schema:\n{\n  \"title\": \"Brief descriptive title (max 100 chars)\",\n  \"summary\": \"Concise explanation (max 300 chars)\",\n  \"category\": \"${category}\",\n  \"impact_score\": 1-10,\n  \"confidence\": 0.0-1.0,\n  \"reasoning\": \"Why this matters (max 500 chars)\",\n  \"implementation_effort\": \"low|medium|high\",\n  \"dependencies\": [\"optional array of dependencies\"],\n  \"metrics\": [\"optional success metrics\"],\n  \"risks\": [\"optional potential risks\"]\n}\n\nReturn only a JSON array of suggestions, no additional text.`;\n        try {\n            const response = await fetch(`${this.baseUrl}/chat/completions`, {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": `Bearer ${this.apiKey}`,\n                    \"Content-Type\": \"application/json\",\n                    \"HTTP-Referer\": \"https://buildrunner.cloud\",\n                    \"X-Title\": \"BuildRunner SaaS\"\n                },\n                body: JSON.stringify({\n                    model: modelConfig.primary,\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: systemPrompt\n                        },\n                        {\n                            role: \"user\",\n                            content: enhancedPrompt\n                        }\n                    ],\n                    temperature: modelConfig.temperature,\n                    max_tokens: modelConfig.max_tokens\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`OpenRouter API error: ${response.status}`);\n            }\n            const data = await response.json();\n            const content = data.choices[0]?.message?.content;\n            if (!content) {\n                throw new Error(\"Empty response from OpenRouter\");\n            }\n            console.log(\"Raw OpenRouter suggestions response:\", content);\n            try {\n                const suggestions = JSON.parse(content);\n                console.log(\"Parsed suggestions:\", suggestions);\n                return Array.isArray(suggestions) ? suggestions : [];\n            } catch (parseError) {\n                console.error(\"Failed to parse suggestions JSON:\", parseError);\n                console.log(\"Content that failed to parse:\", content);\n                // Return mock suggestions if parsing fails\n                return this.getMockSuggestions(category, prompt);\n            }\n        } catch (error) {\n            console.error(\"OpenRouter suggestions error:\", error);\n            // Fallback to mock suggestions if API fails\n            return this.getMockSuggestions(category, prompt);\n        }\n    }\n    async generateResponse(category, messages) {\n        const modelConfig = this.getModelConfig(category);\n        const systemPrompt = this.getSystemPrompt(category);\n        try {\n            const response = await fetch(`${this.baseUrl}/chat/completions`, {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": `Bearer ${this.apiKey}`,\n                    \"Content-Type\": \"application/json\",\n                    \"HTTP-Referer\": \"https://buildrunner.cloud\",\n                    \"X-Title\": \"BuildRunner SaaS\"\n                },\n                body: JSON.stringify({\n                    model: modelConfig.primary,\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: systemPrompt\n                        },\n                        ...messages.slice(-5) // Last 5 messages for context\n                    ],\n                    temperature: modelConfig.temperature,\n                    max_tokens: modelConfig.max_tokens\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`OpenRouter API error: ${response.status}`);\n            }\n            const data = await response.json();\n            const responseContent = data.choices[0]?.message?.content || \"I apologize, but I couldn't generate a response.\";\n            console.log(\"OpenRouter response content:\", responseContent.substring(0, 200) + \"...\");\n            return responseContent;\n        } catch (error) {\n            console.error(\"OpenRouter response error:\", error);\n            // Fallback to mock response if API fails\n            return this.getMockResponse(category, messages);\n        }\n    }\n    getModelConfig(category) {\n        const configs = {\n            strategy: {\n                primary: \"anthropic/claude-3.5-sonnet\",\n                temperature: 0.7,\n                max_tokens: 2000\n            },\n            product: {\n                primary: \"openai/gpt-4-turbo-preview\",\n                temperature: 0.6,\n                max_tokens: 1500\n            },\n            monetization: {\n                primary: \"anthropic/claude-3.5-sonnet\",\n                temperature: 0.5,\n                max_tokens: 1500\n            },\n            gtm: {\n                primary: \"openai/gpt-4-turbo-preview\",\n                temperature: 0.6,\n                max_tokens: 1500\n            },\n            competitor: {\n                primary: \"anthropic/claude-3.5-sonnet\",\n                temperature: 0.4,\n                max_tokens: 2000\n            }\n        };\n        return configs[category] || configs.strategy;\n    }\n    getSystemPrompt(category) {\n        const prompts = {\n            strategy: \"You are StrategyGPT, an expert business strategist specializing in SaaS product strategy, market positioning, and competitive analysis. Provide structured, actionable insights with clear reasoning and data-driven recommendations.\",\n            product: \"You are ProductGPT, a senior product manager with expertise in feature prioritization, user experience design, and product roadmap planning. Focus on user value, technical feasibility, and business impact.\",\n            monetization: \"You are MonetizationGPT, a revenue strategy expert specializing in SaaS pricing models, subscription tiers, and revenue optimization. Provide data-driven pricing recommendations with market analysis.\",\n            gtm: \"You are GTMGPT, a go-to-market specialist with expertise in customer acquisition, marketing channels, sales strategies, and market entry tactics for B2B SaaS products.\",\n            competitor: \"You are CompetitorGPT, a competitive intelligence analyst specializing in market research, feature comparison, and differentiation strategy. Provide objective analysis with actionable competitive insights.\"\n        };\n        return prompts[category] || prompts.strategy;\n    }\n    getMockSuggestions(category, prompt) {\n        return [\n            {\n                title: `${category.charAt(0).toUpperCase() + category.slice(1)} Suggestion`,\n                summary: `AI-generated suggestion for ${category} based on your prompt.`,\n                category,\n                impact_score: Math.floor(Math.random() * 4) + 7,\n                confidence: Math.random() * 0.3 + 0.7,\n                reasoning: `This suggestion addresses key ${category} considerations.`,\n                implementation_effort: [\n                    \"low\",\n                    \"medium\",\n                    \"high\"\n                ][Math.floor(Math.random() * 3)],\n                dependencies: [\n                    `${category} dependency`\n                ],\n                metrics: [\n                    `${category} metric`\n                ],\n                risks: [\n                    `${category} risk`\n                ]\n            }\n        ];\n    }\n    getMockResponse(category, messages) {\n        const lastMessage = messages[messages.length - 1]?.content || \"\";\n        return `Thank you for your question about ${category}. Based on \"${lastMessage.substring(0, 100)}...\", here are some insights based on current best practices and market trends.`;\n    }\n}\nfunction getApiKeys() {\n    // In a real app, these would come from environment variables or secure storage\n    // For now, we'll try to get them from the request headers or use fallback\n    return {\n        openrouter: process.env.OPENROUTER_API_KEY || \"\"\n    };\n}\nasync function POST(request) {\n    console.log(\"Brainstorm chat API called\");\n    try {\n        const body = await request.json();\n        const { category, message, conversation_history } = body;\n        console.log(\"Request data:\", {\n            category,\n            message: message.substring(0, 100) + \"...\",\n            historyLength: conversation_history?.length || 0\n        });\n        if (!category || !message) {\n            console.error(\"Missing required fields:\", {\n                category: !!category,\n                message: !!message\n            });\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Category and message are required\"\n            }, {\n                status: 400\n            });\n        }\n        // Get API keys from headers (sent from client)\n        const apiKeys = request.headers.get(\"x-api-keys\");\n        let openrouterKey = \"\";\n        if (apiKeys) {\n            try {\n                const keys = JSON.parse(apiKeys);\n                openrouterKey = keys.openrouter || \"\";\n                console.log(\"API keys parsed from headers, OpenRouter key present:\", !!openrouterKey);\n            } catch (e) {\n                console.warn(\"Failed to parse API keys from headers:\", e);\n            }\n        }\n        // Fallback to environment variable\n        if (!openrouterKey) {\n            openrouterKey = process.env.OPENROUTER_API_KEY || \"\";\n            console.log(\"Using environment OpenRouter key:\", !!openrouterKey);\n        }\n        if (!openrouterKey) {\n            console.error(\"No OpenRouter API key available\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"OpenRouter API key not configured. Please add it in Settings → API Keys.\"\n            }, {\n                status: 400\n            });\n        }\n        const service = new OpenRouterService(openrouterKey);\n        console.log(\"Generating AI response and suggestions...\");\n        // Generate response and suggestions\n        const [response, suggestions] = await Promise.all([\n            service.generateResponse(category, conversation_history || []),\n            service.generateSuggestions(category, message)\n        ]);\n        console.log(\"AI response generated successfully:\", {\n            responseLength: response?.length || 0,\n            suggestionsCount: suggestions?.length || 0\n        });\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            response,\n            suggestions,\n            category,\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"Error in brainstorm chat:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: `Failed to process chat request: ${error.message}`\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/brainstorm/chat/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fbrainstorm%2Fchat%2Froute&page=%2Fapi%2Fbrainstorm%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbrainstorm%2Fchat%2Froute.ts&appDir=%2FUsers%2Fbyronhudson%2FProjects%2FBuildRunnerSaaS%2Fapps%2Fweb%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbyronhudson%2FProjects%2FBuildRunnerSaaS%2Fapps%2Fweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();