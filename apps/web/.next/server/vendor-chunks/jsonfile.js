"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsonfile";
exports.ids = ["vendor-chunks/jsonfile"];
exports.modules = {

/***/ "(rsc)/../../node_modules/jsonfile/index.js":
/*!********************************************!*\
  !*** ../../node_modules/jsonfile/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet _fs;\ntry {\n    _fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/../../node_modules/graceful-fs/graceful-fs.js\");\n} catch (_) {\n    _fs = __webpack_require__(/*! fs */ \"fs\");\n}\nconst universalify = __webpack_require__(/*! universalify */ \"(rsc)/../../node_modules/universalify/index.js\");\nconst { stringify, stripBom } = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/jsonfile/utils.js\");\nasync function _readFile(file, options = {}) {\n    if (typeof options === \"string\") {\n        options = {\n            encoding: options\n        };\n    }\n    const fs = options.fs || _fs;\n    const shouldThrow = \"throws\" in options ? options.throws : true;\n    let data = await universalify.fromCallback(fs.readFile)(file, options);\n    data = stripBom(data);\n    let obj;\n    try {\n        obj = JSON.parse(data, options ? options.reviver : null);\n    } catch (err) {\n        if (shouldThrow) {\n            err.message = `${file}: ${err.message}`;\n            throw err;\n        } else {\n            return null;\n        }\n    }\n    return obj;\n}\nconst readFile = universalify.fromPromise(_readFile);\nfunction readFileSync(file, options = {}) {\n    if (typeof options === \"string\") {\n        options = {\n            encoding: options\n        };\n    }\n    const fs = options.fs || _fs;\n    const shouldThrow = \"throws\" in options ? options.throws : true;\n    try {\n        let content = fs.readFileSync(file, options);\n        content = stripBom(content);\n        return JSON.parse(content, options.reviver);\n    } catch (err) {\n        if (shouldThrow) {\n            err.message = `${file}: ${err.message}`;\n            throw err;\n        } else {\n            return null;\n        }\n    }\n}\nasync function _writeFile(file, obj, options = {}) {\n    const fs = options.fs || _fs;\n    const str = stringify(obj, options);\n    await universalify.fromCallback(fs.writeFile)(file, str, options);\n}\nconst writeFile = universalify.fromPromise(_writeFile);\nfunction writeFileSync(file, obj, options = {}) {\n    const fs = options.fs || _fs;\n    const str = stringify(obj, options);\n    // not sure if fs.writeFileSync returns anything, but just in case\n    return fs.writeFileSync(file, str, options);\n}\n// NOTE: do not change this export format; required for ESM compat\n// see https://github.com/jprichardson/node-jsonfile/pull/162 for details\nmodule.exports = {\n    readFile,\n    readFileSync,\n    writeFile,\n    writeFileSync\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Yi8uLi8uLi9ub2RlX21vZHVsZXMvanNvbmZpbGUvaW5kZXguanM/MWUwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgX2ZzXG50cnkge1xuICBfZnMgPSByZXF1aXJlKCdncmFjZWZ1bC1mcycpXG59IGNhdGNoIChfKSB7XG4gIF9mcyA9IHJlcXVpcmUoJ2ZzJylcbn1cbmNvbnN0IHVuaXZlcnNhbGlmeSA9IHJlcXVpcmUoJ3VuaXZlcnNhbGlmeScpXG5jb25zdCB7IHN0cmluZ2lmeSwgc3RyaXBCb20gfSA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5hc3luYyBmdW5jdGlvbiBfcmVhZEZpbGUgKGZpbGUsIG9wdGlvbnMgPSB7fSkge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgb3B0aW9ucyA9IHsgZW5jb2Rpbmc6IG9wdGlvbnMgfVxuICB9XG5cbiAgY29uc3QgZnMgPSBvcHRpb25zLmZzIHx8IF9mc1xuXG4gIGNvbnN0IHNob3VsZFRocm93ID0gJ3Rocm93cycgaW4gb3B0aW9ucyA/IG9wdGlvbnMudGhyb3dzIDogdHJ1ZVxuXG4gIGxldCBkYXRhID0gYXdhaXQgdW5pdmVyc2FsaWZ5LmZyb21DYWxsYmFjayhmcy5yZWFkRmlsZSkoZmlsZSwgb3B0aW9ucylcblxuICBkYXRhID0gc3RyaXBCb20oZGF0YSlcblxuICBsZXQgb2JqXG4gIHRyeSB7XG4gICAgb2JqID0gSlNPTi5wYXJzZShkYXRhLCBvcHRpb25zID8gb3B0aW9ucy5yZXZpdmVyIDogbnVsbClcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKHNob3VsZFRocm93KSB7XG4gICAgICBlcnIubWVzc2FnZSA9IGAke2ZpbGV9OiAke2Vyci5tZXNzYWdlfWBcbiAgICAgIHRocm93IGVyclxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmpcbn1cblxuY29uc3QgcmVhZEZpbGUgPSB1bml2ZXJzYWxpZnkuZnJvbVByb21pc2UoX3JlYWRGaWxlKVxuXG5mdW5jdGlvbiByZWFkRmlsZVN5bmMgKGZpbGUsIG9wdGlvbnMgPSB7fSkge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgb3B0aW9ucyA9IHsgZW5jb2Rpbmc6IG9wdGlvbnMgfVxuICB9XG5cbiAgY29uc3QgZnMgPSBvcHRpb25zLmZzIHx8IF9mc1xuXG4gIGNvbnN0IHNob3VsZFRocm93ID0gJ3Rocm93cycgaW4gb3B0aW9ucyA/IG9wdGlvbnMudGhyb3dzIDogdHJ1ZVxuXG4gIHRyeSB7XG4gICAgbGV0IGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgb3B0aW9ucylcbiAgICBjb250ZW50ID0gc3RyaXBCb20oY29udGVudClcbiAgICByZXR1cm4gSlNPTi5wYXJzZShjb250ZW50LCBvcHRpb25zLnJldml2ZXIpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChzaG91bGRUaHJvdykge1xuICAgICAgZXJyLm1lc3NhZ2UgPSBgJHtmaWxlfTogJHtlcnIubWVzc2FnZX1gXG4gICAgICB0aHJvdyBlcnJcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gX3dyaXRlRmlsZSAoZmlsZSwgb2JqLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgZnMgPSBvcHRpb25zLmZzIHx8IF9mc1xuXG4gIGNvbnN0IHN0ciA9IHN0cmluZ2lmeShvYmosIG9wdGlvbnMpXG5cbiAgYXdhaXQgdW5pdmVyc2FsaWZ5LmZyb21DYWxsYmFjayhmcy53cml0ZUZpbGUpKGZpbGUsIHN0ciwgb3B0aW9ucylcbn1cblxuY29uc3Qgd3JpdGVGaWxlID0gdW5pdmVyc2FsaWZ5LmZyb21Qcm9taXNlKF93cml0ZUZpbGUpXG5cbmZ1bmN0aW9uIHdyaXRlRmlsZVN5bmMgKGZpbGUsIG9iaiwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGZzID0gb3B0aW9ucy5mcyB8fCBfZnNcblxuICBjb25zdCBzdHIgPSBzdHJpbmdpZnkob2JqLCBvcHRpb25zKVxuICAvLyBub3Qgc3VyZSBpZiBmcy53cml0ZUZpbGVTeW5jIHJldHVybnMgYW55dGhpbmcsIGJ1dCBqdXN0IGluIGNhc2VcbiAgcmV0dXJuIGZzLndyaXRlRmlsZVN5bmMoZmlsZSwgc3RyLCBvcHRpb25zKVxufVxuXG4vLyBOT1RFOiBkbyBub3QgY2hhbmdlIHRoaXMgZXhwb3J0IGZvcm1hdDsgcmVxdWlyZWQgZm9yIEVTTSBjb21wYXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vanByaWNoYXJkc29uL25vZGUtanNvbmZpbGUvcHVsbC8xNjIgZm9yIGRldGFpbHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICByZWFkRmlsZSxcbiAgcmVhZEZpbGVTeW5jLFxuICB3cml0ZUZpbGUsXG4gIHdyaXRlRmlsZVN5bmNcbn1cbiJdLCJuYW1lcyI6WyJfZnMiLCJyZXF1aXJlIiwiXyIsInVuaXZlcnNhbGlmeSIsInN0cmluZ2lmeSIsInN0cmlwQm9tIiwiX3JlYWRGaWxlIiwiZmlsZSIsIm9wdGlvbnMiLCJlbmNvZGluZyIsImZzIiwic2hvdWxkVGhyb3ciLCJ0aHJvd3MiLCJkYXRhIiwiZnJvbUNhbGxiYWNrIiwicmVhZEZpbGUiLCJvYmoiLCJKU09OIiwicGFyc2UiLCJyZXZpdmVyIiwiZXJyIiwibWVzc2FnZSIsImZyb21Qcm9taXNlIiwicmVhZEZpbGVTeW5jIiwiY29udGVudCIsIl93cml0ZUZpbGUiLCJzdHIiLCJ3cml0ZUZpbGUiLCJ3cml0ZUZpbGVTeW5jIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/jsonfile/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/jsonfile/utils.js":
/*!********************************************!*\
  !*** ../../node_modules/jsonfile/utils.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nfunction stringify(obj, { EOL = \"\\n\", finalEOL = true, replacer = null, spaces } = {}) {\n    const EOF = finalEOL ? EOL : \"\";\n    const str = JSON.stringify(obj, replacer, spaces);\n    return str.replace(/\\n/g, EOL) + EOF;\n}\nfunction stripBom(content) {\n    // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n    if (Buffer.isBuffer(content)) content = content.toString(\"utf8\");\n    return content.replace(/^\\uFEFF/, \"\");\n}\nmodule.exports = {\n    stringify,\n    stripBom\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2pzb25maWxlL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxTQUFTQSxVQUFXQyxHQUFHLEVBQUUsRUFBRUMsTUFBTSxJQUFJLEVBQUVDLFdBQVcsSUFBSSxFQUFFQyxXQUFXLElBQUksRUFBRUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3BGLE1BQU1DLE1BQU1ILFdBQVdELE1BQU07SUFDN0IsTUFBTUssTUFBTUMsS0FBS1IsU0FBUyxDQUFDQyxLQUFLRyxVQUFVQztJQUUxQyxPQUFPRSxJQUFJRSxPQUFPLENBQUMsT0FBT1AsT0FBT0k7QUFDbkM7QUFFQSxTQUFTSSxTQUFVQyxPQUFPO0lBQ3hCLCtGQUErRjtJQUMvRixJQUFJQyxPQUFPQyxRQUFRLENBQUNGLFVBQVVBLFVBQVVBLFFBQVFHLFFBQVEsQ0FBQztJQUN6RCxPQUFPSCxRQUFRRixPQUFPLENBQUMsV0FBVztBQUNwQztBQUVBTSxPQUFPQyxPQUFPLEdBQUc7SUFBRWhCO0lBQVdVO0FBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWlsZHJ1bm5lci13ZWIvLi4vLi4vbm9kZV9tb2R1bGVzL2pzb25maWxlL3V0aWxzLmpzPzJiMWYiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc3RyaW5naWZ5IChvYmosIHsgRU9MID0gJ1xcbicsIGZpbmFsRU9MID0gdHJ1ZSwgcmVwbGFjZXIgPSBudWxsLCBzcGFjZXMgfSA9IHt9KSB7XG4gIGNvbnN0IEVPRiA9IGZpbmFsRU9MID8gRU9MIDogJydcbiAgY29uc3Qgc3RyID0gSlNPTi5zdHJpbmdpZnkob2JqLCByZXBsYWNlciwgc3BhY2VzKVxuXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxuL2csIEVPTCkgKyBFT0Zcbn1cblxuZnVuY3Rpb24gc3RyaXBCb20gKGNvbnRlbnQpIHtcbiAgLy8gd2UgZG8gdGhpcyBiZWNhdXNlIEpTT04ucGFyc2Ugd291bGQgY29udmVydCBpdCB0byBhIHV0Zjggc3RyaW5nIGlmIGVuY29kaW5nIHdhc24ndCBzcGVjaWZpZWRcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjb250ZW50KSkgY29udGVudCA9IGNvbnRlbnQudG9TdHJpbmcoJ3V0ZjgnKVxuICByZXR1cm4gY29udGVudC5yZXBsYWNlKC9eXFx1RkVGRi8sICcnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgc3RyaW5naWZ5LCBzdHJpcEJvbSB9XG4iXSwibmFtZXMiOlsic3RyaW5naWZ5Iiwib2JqIiwiRU9MIiwiZmluYWxFT0wiLCJyZXBsYWNlciIsInNwYWNlcyIsIkVPRiIsInN0ciIsIkpTT04iLCJyZXBsYWNlIiwic3RyaXBCb20iLCJjb250ZW50IiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/jsonfile/utils.js\n");

/***/ })

};
;