"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(app)/brainstorm/page",{

/***/ "(app-pages-browser)/./lib/brainstorm/state.ts":
/*!*********************************!*\
  !*** ./lib/brainstorm/state.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBrainstormState: function() { return /* binding */ useBrainstormState; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nconst STORAGE_KEY = \"brainstorm_state\";\nconst SESSIONS_KEY = \"brainstorm_sessions\";\n// Initialize default state\nconst createInitialState = ()=>({\n        suggestions: [],\n        sessionId: \"session_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9)),\n        startedAt: new Date(),\n        lastUpdated: new Date(),\n        metadata: {\n            totalSuggestions: 0,\n            acceptedCount: 0,\n            rejectedCount: 0,\n            deferredCount: 0,\n            categories: {}\n        }\n    });\n// Calculate metadata from suggestions\nconst calculateMetadata = (suggestions)=>{\n    const metadata = {\n        totalSuggestions: suggestions.length,\n        acceptedCount: 0,\n        rejectedCount: 0,\n        deferredCount: 0,\n        categories: {}\n    };\n    suggestions.forEach((suggestion)=>{\n        // Count decisions\n        if (suggestion.decision === \"accepted\") metadata.acceptedCount++;\n        else if (suggestion.decision === \"rejected\") metadata.rejectedCount++;\n        else if (suggestion.decision === \"deferred\") metadata.deferredCount++;\n        // Count categories\n        metadata.categories[suggestion.category] = (metadata.categories[suggestion.category] || 0) + 1;\n    });\n    return metadata;\n};\n// Save state to localStorage\nconst saveState = (state)=>{\n    try {\n        const serialized = {\n            ...state,\n            startedAt: state.startedAt.toISOString(),\n            lastUpdated: state.lastUpdated.toISOString(),\n            suggestions: state.suggestions.map((s)=>({\n                    ...s,\n                    created_at: s.created_at.toISOString()\n                }))\n        };\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(serialized));\n    } catch (error) {\n        console.error(\"Failed to save brainstorm state:\", error);\n    }\n};\n// Load state from localStorage\nconst loadState = ()=>{\n    try {\n        const saved = localStorage.getItem(STORAGE_KEY);\n        if (!saved) return createInitialState();\n        const parsed = JSON.parse(saved);\n        return {\n            ...parsed,\n            startedAt: new Date(parsed.startedAt),\n            lastUpdated: new Date(parsed.lastUpdated),\n            suggestions: parsed.suggestions.map((s)=>({\n                    ...s,\n                    created_at: new Date(s.created_at)\n                }))\n        };\n    } catch (error) {\n        console.error(\"Failed to load brainstorm state:\", error);\n        return createInitialState();\n    }\n};\n// Save session to history\nconst saveSession = (session)=>{\n    try {\n        const sessions = loadSessions();\n        const existingIndex = sessions.findIndex((s)=>s.id === session.id);\n        if (existingIndex >= 0) {\n            sessions[existingIndex] = session;\n        } else {\n            sessions.push(session);\n        }\n        // Keep only last 10 sessions\n        const recentSessions = sessions.slice(-10);\n        localStorage.setItem(SESSIONS_KEY, JSON.stringify(recentSessions));\n    } catch (error) {\n        console.error(\"Failed to save session:\", error);\n    }\n};\n// Load sessions from history\nconst loadSessions = ()=>{\n    try {\n        const saved = localStorage.getItem(SESSIONS_KEY);\n        if (!saved) return [];\n        const parsed = JSON.parse(saved);\n        return parsed.map((session)=>({\n                ...session,\n                state: {\n                    ...session.state,\n                    startedAt: new Date(session.state.startedAt),\n                    lastUpdated: new Date(session.state.lastUpdated),\n                    suggestions: session.state.suggestions.map((s)=>({\n                            ...s,\n                            created_at: new Date(s.created_at)\n                        }))\n                },\n                exportedAt: session.exportedAt ? new Date(session.exportedAt) : undefined\n            }));\n    } catch (error) {\n        console.error(\"Failed to load sessions:\", error);\n        return [];\n    }\n};\n// Sync state with Supabase (if authenticated)\nconst syncWithSupabase = async (state)=>{\n    try {\n        const response = await fetch(\"/api/brainstorm/sync\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(state)\n        });\n        if (!response.ok) {\n            console.warn(\"Failed to sync with Supabase:\", response.statusText);\n        }\n    } catch (error) {\n        console.warn(\"Supabase sync failed:\", error);\n    // Continue with local storage only\n    }\n};\n// Custom hook for brainstorm state management\nconst useBrainstormState = ()=>{\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(createInitialState);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    // Load initial state\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const loadedState = loadState();\n        setState(loadedState);\n        setIsLoading(false);\n    }, []);\n    // Update state and persist\n    const updateState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((updater)=>{\n        setState((prev)=>{\n            const newState = updater(prev);\n            const stateWithMetadata = {\n                ...newState,\n                lastUpdated: new Date(),\n                metadata: calculateMetadata(newState.suggestions)\n            };\n            // Save to localStorage\n            saveState(stateWithMetadata);\n            // Sync with Supabase (async, non-blocking)\n            syncWithSupabase(stateWithMetadata);\n            return stateWithMetadata;\n        });\n    }, []);\n    // Add a new suggestion\n    const addSuggestion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((suggestion)=>{\n        updateState((prev)=>({\n                ...prev,\n                suggestions: [\n                    ...prev.suggestions,\n                    {\n                        ...suggestion,\n                        id: \"suggestion_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9)),\n                        decision: \"pending\"\n                    }\n                ]\n            }));\n    }, [\n        updateState\n    ]);\n    // Update suggestion decision\n    const updateDecision = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id, decision, notes)=>{\n        updateState((prev)=>({\n                ...prev,\n                suggestions: prev.suggestions.map((s)=>s.id === id ? {\n                        ...s,\n                        decision,\n                        notes: notes || s.notes\n                    } : s)\n            }));\n    }, [\n        updateState\n    ]);\n    // Update suggestion\n    const updateSuggestion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id, updates)=>{\n        updateState((prev)=>({\n                ...prev,\n                suggestions: prev.suggestions.map((s)=>s.id === id ? {\n                        ...s,\n                        ...updates\n                    } : s)\n            }));\n    }, [\n        updateState\n    ]);\n    // Remove suggestion\n    const removeSuggestion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id)=>{\n        updateState((prev)=>({\n                ...prev,\n                suggestions: prev.suggestions.filter((s)=>s.id !== id)\n            }));\n    }, [\n        updateState\n    ]);\n    // Clear all suggestions\n    const clearSuggestions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        updateState((prev)=>({\n                ...prev,\n                suggestions: []\n            }));\n    }, [\n        updateState\n    ]);\n    // Reset to new session\n    const startNewSession = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        // Save current session to history\n        const currentSession = {\n            id: state.sessionId,\n            state,\n            conversationHistory: []\n        };\n        saveSession(currentSession);\n        // Create new session\n        const newState = createInitialState();\n        setState(newState);\n        saveState(newState);\n    }, [\n        state\n    ]);\n    // Load a previous session\n    const loadSession = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((sessionId)=>{\n        const sessions = loadSessions();\n        const session = sessions.find((s)=>s.id === sessionId);\n        if (session) {\n            setState(session.state);\n            saveState(session.state);\n        }\n    }, []);\n    // Export current state as markdown\n    const exportHistory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        const { suggestions, sessionId, startedAt, metadata } = state;\n        let markdown = \"# Brainstorm Session Report\\n\\n\";\n        markdown += \"**Session ID:** \".concat(sessionId, \"\\n\");\n        markdown += \"**Started:** \".concat(startedAt.toLocaleString(), \"\\n\");\n        markdown += \"**Last Updated:** \".concat(state.lastUpdated.toLocaleString(), \"\\n\\n\");\n        // Summary\n        markdown += \"## Summary\\n\\n\";\n        markdown += \"- **Total Suggestions:** \".concat(metadata.totalSuggestions, \"\\n\");\n        markdown += \"- **Accepted:** \".concat(metadata.acceptedCount, \"\\n\");\n        markdown += \"- **Rejected:** \".concat(metadata.rejectedCount, \"\\n\");\n        markdown += \"- **Deferred:** \".concat(metadata.deferredCount, \"\\n\");\n        markdown += \"- **Pending:** \".concat(metadata.totalSuggestions - metadata.acceptedCount - metadata.rejectedCount - metadata.deferredCount, \"\\n\\n\");\n        // Categories breakdown\n        markdown += \"### Categories\\n\\n\";\n        Object.entries(metadata.categories).forEach((param)=>{\n            let [category, count] = param;\n            markdown += \"- **\".concat(category.charAt(0).toUpperCase() + category.slice(1), \":** \").concat(count, \"\\n\");\n        });\n        markdown += \"\\n\";\n        // Decisions table\n        markdown += \"## Decisions\\n\\n\";\n        markdown += \"| Title | Category | Decision | Impact | Confidence | Effort | Notes |\\n\";\n        markdown += \"|-------|----------|----------|--------|------------|--------|-------|\\n\";\n        suggestions.forEach((suggestion)=>{\n            const decision = suggestion.decision || \"pending\";\n            const notes = suggestion.notes ? suggestion.notes.replace(/\\n/g, \" \").substring(0, 50) + \"...\" : \"\";\n            markdown += \"| \".concat(suggestion.title, \" | \").concat(suggestion.category, \" | \").concat(decision, \" | \").concat(suggestion.impact_score, \"/10 | \").concat(Math.round(suggestion.confidence * 100), \"% | \").concat(suggestion.implementation_effort, \" | \").concat(notes, \" |\\n\");\n        });\n        markdown += \"\\n\";\n        // Accepted suggestions detail\n        const accepted = suggestions.filter((s)=>s.decision === \"accepted\");\n        if (accepted.length > 0) {\n            markdown += \"## Accepted Suggestions\\n\\n\";\n            accepted.forEach((suggestion, index)=>{\n                markdown += \"### \".concat(index + 1, \". \").concat(suggestion.title, \"\\n\\n\");\n                markdown += \"**Category:** \".concat(suggestion.category, \"\\n\");\n                markdown += \"**Impact Score:** \".concat(suggestion.impact_score, \"/10\\n\");\n                markdown += \"**Confidence:** \".concat(Math.round(suggestion.confidence * 100), \"%\\n\");\n                markdown += \"**Implementation Effort:** \".concat(suggestion.implementation_effort, \"\\n\\n\");\n                markdown += \"**Summary:** \".concat(suggestion.summary, \"\\n\\n\");\n                markdown += \"**Reasoning:** \".concat(suggestion.reasoning, \"\\n\\n\");\n                if (suggestion.dependencies && suggestion.dependencies.length > 0) {\n                    markdown += \"**Dependencies:**\\n\";\n                    suggestion.dependencies.forEach((dep)=>{\n                        markdown += \"- \".concat(dep, \"\\n\");\n                    });\n                    markdown += \"\\n\";\n                }\n                if (suggestion.metrics && suggestion.metrics.length > 0) {\n                    markdown += \"**Success Metrics:**\\n\";\n                    suggestion.metrics.forEach((metric)=>{\n                        markdown += \"- \".concat(metric, \"\\n\");\n                    });\n                    markdown += \"\\n\";\n                }\n                if (suggestion.risks && suggestion.risks.length > 0) {\n                    markdown += \"**Risks:**\\n\";\n                    suggestion.risks.forEach((risk)=>{\n                        markdown += \"- \".concat(risk, \"\\n\");\n                    });\n                    markdown += \"\\n\";\n                }\n                if (suggestion.notes) {\n                    markdown += \"**Notes:** \".concat(suggestion.notes, \"\\n\\n\");\n                }\n                markdown += \"---\\n\\n\";\n            });\n        }\n        // Mark session as exported\n        updateState((prev)=>prev);\n        const session = {\n            id: sessionId,\n            state,\n            conversationHistory: [],\n            exportedAt: new Date()\n        };\n        saveSession(session);\n        return markdown;\n    }, [\n        state,\n        updateState\n    ]);\n    // Get filtered suggestions\n    const getFilteredSuggestions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((filters)=>{\n        return state.suggestions.filter((suggestion)=>{\n            if (filters.category && suggestion.category !== filters.category) return false;\n            if (filters.decision && suggestion.decision !== filters.decision) return false;\n            if (filters.minImpact && suggestion.impact_score < filters.minImpact) return false;\n            if (filters.maxImpact && suggestion.impact_score > filters.maxImpact) return false;\n            return true;\n        });\n    }, [\n        state.suggestions\n    ]);\n    // Get session history\n    const getSessionHistory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        return loadSessions();\n    }, []);\n    return {\n        state,\n        isLoading,\n        addSuggestion,\n        updateDecision,\n        updateSuggestion,\n        removeSuggestion,\n        clearSuggestions,\n        startNewSession,\n        loadSession,\n        exportHistory,\n        getFilteredSuggestions,\n        getSessionHistory\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/brainstorm/state.ts\n"));

/***/ })

});