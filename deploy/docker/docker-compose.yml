version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: buildrunner-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-buildrunner}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-scram-sha-256}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - buildrunner-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-buildrunner}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: buildrunner-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - buildrunner-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Supabase Edge Functions (optional proxy)
  edge-functions:
    image: supabase/edge-runtime:v1.22.4
    container_name: buildrunner-edge-functions
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    ports:
      - "${EDGE_FUNCTIONS_PORT:-54321}:9000"
    volumes:
      - ../supabase/functions:/home/deno/functions:ro
    networks:
      - buildrunner-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # BuildRunner Web Application
  web:
    build:
      context: ../../
      dockerfile: deploy/docker/Dockerfile.web
      args:
        - NODE_ENV=${NODE_ENV:-production}
    container_name: buildrunner-web
    environment:
      # Database
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/buildrunner}
      - POSTGRES_URL=${POSTGRES_URL:-postgresql://postgres:postgres@postgres:5432/buildrunner}
      
      # Supabase
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL:-http://localhost:54321}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # Redis
      - REDIS_URL=${REDIS_URL:-redis://:redis123@redis:6379}
      
      # Auth & Security
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      
      # SSO Configuration
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID}
      - OIDC_CLIENT_SECRET=${OIDC_CLIENT_SECRET}
      - OIDC_ISSUER=${OIDC_ISSUER}
      - SAML_CERT=${SAML_CERT}
      - SAML_PRIVATE_KEY=${SAML_PRIVATE_KEY}
      
      # External Services
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      
      # Enterprise Features
      - AUDIT_EXPORT_BUCKET=${AUDIT_EXPORT_BUCKET}
      - AUDIT_EXPORT_ACCESS_KEY=${AUDIT_EXPORT_ACCESS_KEY}
      - AUDIT_EXPORT_SECRET_KEY=${AUDIT_EXPORT_SECRET_KEY}
      - SIEM_WEBHOOK_URL=${SIEM_WEBHOOK_URL}
      - DATA_RESIDENCY=${DATA_RESIDENCY:-us}
      
      # Application
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
    ports:
      - "${WEB_PORT:-3000}:3000"
    volumes:
      - ../../buildrunner:/app/buildrunner:ro
      - web_uploads:/app/uploads
    networks:
      - buildrunner-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Background Worker for async tasks
  worker:
    build:
      context: ../../
      dockerfile: deploy/docker/Dockerfile.worker
    container_name: buildrunner-worker
    environment:
      # Database
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/buildrunner}
      - POSTGRES_URL=${POSTGRES_URL:-postgresql://postgres:postgres@postgres:5432/buildrunner}
      
      # Redis
      - REDIS_URL=${REDIS_URL:-redis://:redis123@redis:6379}
      
      # Supabase
      - SUPABASE_URL=${SUPABASE_URL:-http://localhost:54321}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # External Services
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      
      # Enterprise Features
      - AUDIT_EXPORT_BUCKET=${AUDIT_EXPORT_BUCKET}
      - AUDIT_EXPORT_ACCESS_KEY=${AUDIT_EXPORT_ACCESS_KEY}
      - AUDIT_EXPORT_SECRET_KEY=${AUDIT_EXPORT_SECRET_KEY}
      - SIEM_WEBHOOK_URL=${SIEM_WEBHOOK_URL}
      
      # Worker Configuration
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
      - WORKER_TIMEOUT=${WORKER_TIMEOUT:-300}
      - NODE_ENV=${NODE_ENV:-production}
    volumes:
      - ../../buildrunner:/app/buildrunner:ro
      - worker_logs:/app/logs
    networks:
      - buildrunner-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: buildrunner-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - buildrunner-network
    depends_on:
      - web
    restart: unless-stopped

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: buildrunner-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - buildrunner-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: buildrunner-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - buildrunner-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  web_uploads:
    driver: local
  worker_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  buildrunner-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
