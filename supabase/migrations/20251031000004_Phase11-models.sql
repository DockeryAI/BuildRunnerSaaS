-- Phase 11 Explainability & Multi-Model
-- Idempotent migration for model profiles, runs, arbitration, and explanations

-- Model profiles for different AI models and their capabilities
create table if not exists model_profiles (
  id uuid primary key default gen_random_uuid(),
  name text not null unique,
  provider text not null check (provider in ('openai', 'anthropic', 'google', 'local', 'custom')),
  model_id text not null, -- e.g., 'gpt-4', 'claude-3-sonnet', 'gemini-pro'
  task_types text[] not null check (array_length(task_types, 1) > 0),
  enabled boolean default true,
  config jsonb default '{}',
  cost_per_input_token numeric default 0,
  cost_per_output_token numeric default 0,
  max_tokens int default 4096,
  supports_streaming boolean default false,
  supports_function_calling boolean default false,
  quality_rating numeric default 0 check (quality_rating >= 0 and quality_rating <= 10),
  speed_rating numeric default 0 check (speed_rating >= 0 and speed_rating <= 10),
  metadata jsonb default '{}',
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Model execution runs with performance metrics
create table if not exists model_runs (
  id uuid primary key default gen_random_uuid(),
  project_id uuid,
  task_type text not null check (task_type in ('planner', 'builder', 'qa', 'explain', 'rescope', 'arbitrate')),
  model_name text not null,
  model_provider text not null,
  input_tokens int default 0 check (input_tokens >= 0),
  output_tokens int default 0 check (output_tokens >= 0),
  latency_ms int default 0 check (latency_ms >= 0),
  success boolean default false,
  quality_score numeric default 0 check (quality_score >= 0 and quality_score <= 100),
  cost_usd numeric default 0 check (cost_usd >= 0),
  error_message text,
  payload jsonb default '{}',
  response_payload jsonb default '{}',
  user_id uuid,
  entity_type text,
  entity_id text,
  created_at timestamptz default now()
);

-- Arbitration results when running multiple models for comparison
create table if not exists arbitration_results (
  id uuid primary key default gen_random_uuid(),
  project_id uuid,
  task_type text not null,
  candidate_a jsonb not null,
  candidate_b jsonb not null,
  winner text not null check (winner in ('candidate_a', 'candidate_b', 'tie')),
  rationale text not null,
  judge_model text not null,
  confidence_score numeric default 0 check (confidence_score >= 0 and confidence_score <= 100),
  cost_multiplier numeric default 2.0,
  total_cost_usd numeric default 0,
  user_id uuid,
  metadata jsonb default '{}',
  created_at timestamptz default now()
);

-- Explanations generated by AI models for different scopes
create table if not exists explanations (
  id uuid primary key default gen_random_uuid(),
  project_id uuid,
  scope text not null check (scope in ('project', 'milestone', 'step', 'microstep', 'weekly', 'monthly')),
  entity_id text,
  model_name text not null,
  model_provider text not null,
  title text,
  content text not null check (length(content) > 0),
  content_type text default 'markdown' check (content_type in ('markdown', 'html', 'plain')),
  language text default 'en',
  audience text default 'technical' check (audience in ('technical', 'business', 'general')),
  tokens_used int default 0,
  generation_time_ms int default 0,
  user_id uuid,
  is_exported boolean default false,
  exported_at timestamptz,
  metadata jsonb default '{}',
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Project-specific model settings and overrides
create table if not exists project_model_settings (
  id uuid primary key default gen_random_uuid(),
  project_id uuid not null,
  task_type text not null,
  preferred_model text not null,
  fallback_model text,
  dual_run_enabled boolean default false,
  max_cost_multiplier numeric default 2.0 check (max_cost_multiplier >= 1.0),
  quality_threshold numeric default 70 check (quality_threshold >= 0 and quality_threshold <= 100),
  settings jsonb default '{}',
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  unique(project_id, task_type)
);

-- Model performance aggregates for quick lookups
create table if not exists model_performance_summary (
  id uuid primary key default gen_random_uuid(),
  model_name text not null,
  task_type text not null,
  period_start date not null,
  period_end date not null,
  total_runs int default 0,
  success_rate numeric default 0,
  avg_latency_ms numeric default 0,
  avg_quality_score numeric default 0,
  total_cost_usd numeric default 0,
  avg_input_tokens numeric default 0,
  avg_output_tokens numeric default 0,
  win_rate numeric default 0, -- For arbitration results
  metadata jsonb default '{}',
  created_at timestamptz default now(),
  unique(model_name, task_type, period_start, period_end)
);

-- Performance indexes for efficient queries
create index if not exists idx_model_profiles_provider on model_profiles(provider);
create index if not exists idx_model_profiles_task_types on model_profiles using gin(task_types);
create index if not exists idx_model_profiles_enabled on model_profiles(enabled) where enabled = true;

create index if not exists idx_model_runs_project on model_runs(project_id);
create index if not exists idx_model_runs_task_model on model_runs(task_type, model_name);
create index if not exists idx_model_runs_created on model_runs(created_at desc);
create index if not exists idx_model_runs_success on model_runs(success, task_type);
create index if not exists idx_model_runs_quality on model_runs(quality_score desc) where quality_score > 0;

create index if not exists idx_arbitration_results_project on arbitration_results(project_id);
create index if not exists idx_arbitration_results_task on arbitration_results(task_type);
create index if not exists idx_arbitration_results_winner on arbitration_results(winner);
create index if not exists idx_arbitration_results_created on arbitration_results(created_at desc);

create index if not exists idx_explanations_project on explanations(project_id);
create index if not exists idx_explanations_scope_entity on explanations(scope, entity_id);
create index if not exists idx_explanations_model on explanations(model_name);
create index if not exists idx_explanations_created on explanations(created_at desc);

create index if not exists idx_project_model_settings_project on project_model_settings(project_id);
create index if not exists idx_project_model_settings_task on project_model_settings(task_type);

create index if not exists idx_model_performance_summary_model_task on model_performance_summary(model_name, task_type);
create index if not exists idx_model_performance_summary_period on model_performance_summary(period_start, period_end);

-- RLS (Row Level Security) policies
alter table model_profiles enable row level security;
alter table model_runs enable row level security;
alter table arbitration_results enable row level security;
alter table explanations enable row level security;
alter table project_model_settings enable row level security;
alter table model_performance_summary enable row level security;

-- Basic RLS policies (can be customized based on auth requirements)
create policy "model_profiles_read" on model_profiles for select using (true);
create policy "model_profiles_write" on model_profiles for all using (auth.role() = 'service_role');

create policy "model_runs_read" on model_runs for select using (true);
create policy "model_runs_write" on model_runs for all using (auth.role() = 'service_role');

create policy "arbitration_results_read" on arbitration_results for select using (true);
create policy "arbitration_results_write" on arbitration_results for all using (auth.role() = 'service_role');

create policy "explanations_read" on explanations for select using (true);
create policy "explanations_write" on explanations for all using (auth.role() = 'service_role');

create policy "project_model_settings_read" on project_model_settings for select using (true);
create policy "project_model_settings_write" on project_model_settings for all using (auth.role() = 'service_role');

create policy "model_performance_summary_read" on model_performance_summary for select using (true);
create policy "model_performance_summary_write" on model_performance_summary for all using (auth.role() = 'service_role');

-- Helper functions for model management
create or replace function get_best_model_for_task(p_task_type text, p_project_id uuid default null)
returns text as $$
declare
  best_model text;
begin
  -- Check for project-specific override first
  if p_project_id is not null then
    select preferred_model into best_model
    from project_model_settings
    where project_id = p_project_id
      and task_type = p_task_type;
    
    if best_model is not null then
      return best_model;
    end if;
  end if;
  
  -- Fall back to best performing model globally
  select model_name into best_model
  from model_performance_summary
  where task_type = p_task_type
    and period_end >= current_date - interval '30 days'
  order by 
    (success_rate * 0.4 + (100 - avg_latency_ms/1000) * 0.3 + avg_quality_score * 0.3) desc
  limit 1;
  
  -- If no performance data, use default enabled model
  if best_model is null then
    select name into best_model
    from model_profiles
    where p_task_type = any(task_types)
      and enabled = true
    order by quality_rating desc, speed_rating desc
    limit 1;
  end if;
  
  return coalesce(best_model, 'gpt-4');
end;
$$ language plpgsql;

create or replace function record_model_run(
  p_project_id uuid,
  p_task_type text,
  p_model_name text,
  p_model_provider text,
  p_input_tokens int,
  p_output_tokens int,
  p_latency_ms int,
  p_success boolean,
  p_quality_score numeric default null,
  p_cost_usd numeric default null,
  p_error_message text default null,
  p_payload jsonb default '{}',
  p_response_payload jsonb default '{}',
  p_user_id uuid default null,
  p_entity_type text default null,
  p_entity_id text default null
)
returns uuid as $$
declare
  run_id uuid;
begin
  insert into model_runs (
    project_id, task_type, model_name, model_provider,
    input_tokens, output_tokens, latency_ms, success,
    quality_score, cost_usd, error_message, payload,
    response_payload, user_id, entity_type, entity_id
  ) values (
    p_project_id, p_task_type, p_model_name, p_model_provider,
    p_input_tokens, p_output_tokens, p_latency_ms, p_success,
    p_quality_score, p_cost_usd, p_error_message, p_payload,
    p_response_payload, p_user_id, p_entity_type, p_entity_id
  ) returning id into run_id;
  
  return run_id;
end;
$$ language plpgsql;

-- Insert default model profiles
insert into model_profiles (name, provider, model_id, task_types, cost_per_input_token, cost_per_output_token, max_tokens, supports_function_calling, quality_rating, speed_rating) values
  ('gpt-4', 'openai', 'gpt-4', array['planner', 'builder', 'qa', 'explain', 'arbitrate'], 0.00003, 0.00006, 8192, true, 9.5, 6.0),
  ('gpt-3.5-turbo', 'openai', 'gpt-3.5-turbo', array['builder', 'qa', 'rescope'], 0.0000015, 0.000002, 4096, true, 7.5, 9.0),
  ('claude-3-sonnet', 'anthropic', 'claude-3-sonnet-20240229', array['planner', 'explain', 'arbitrate'], 0.000003, 0.000015, 200000, false, 9.0, 7.5),
  ('claude-3-haiku', 'anthropic', 'claude-3-haiku-20240307', array['builder', 'qa', 'rescope'], 0.00000025, 0.00000125, 200000, false, 8.0, 9.5)
on conflict (name) do update set
  provider = excluded.provider,
  model_id = excluded.model_id,
  task_types = excluded.task_types,
  cost_per_input_token = excluded.cost_per_input_token,
  cost_per_output_token = excluded.cost_per_output_token,
  max_tokens = excluded.max_tokens,
  supports_function_calling = excluded.supports_function_calling,
  quality_rating = excluded.quality_rating,
  speed_rating = excluded.speed_rating,
  updated_at = now();

-- Grant necessary permissions
grant usage on schema public to anon, authenticated;
grant select on all tables in schema public to anon, authenticated;
grant all on all tables in schema public to service_role;
grant all on all sequences in schema public to service_role;
grant execute on all functions in schema public to service_role;
